<%
var
  target= underlay? 'this._underlay.': 'this._',
  observedAttributes= [],
  events= [],
  // optionals:
  underlay= typeof underlay!== "undefined"&& underlay,
  forceSet= typeof forceSet!== "undefined"&& forceSet
function idlType(i){ return i.idlType }

-%>
class <%= name %> extends HTMLElement{
<% for( member of members){ -%>
<% if( member.type== "attribute"){ -%>
<% if( member.name.substring( 0, 2)== "on"){
	events.push( member.name.substring( 2))
	continue
} -%>
	get <%= member.name %>()/*: <%= idlType(member.idlType) %> */{
		return <%= target %><%= member.name %>
	}
<% observedAttributes.push( member.name) -%>
<% if( !member.readonly|| forceSet){ -%>
	set <%= member.name %>( val/*: <%= idlType(member.idlType) %> */)/*: void */{
<% if( !member.readonly|| forceSet=== "set"){ -%>
		<%= target %><%= member.name %>= val
<% }else{ -%>
		throw new Error("Cannot set '<%= member.name %>'")
<% } -%>
	}
<% } -%>
<% }else if(member.type=== "operation"){ -%>
	<%= member.name %>(<%= member.arguments.join(",") %>)/*: <%= idlType(member.idlType) %> */{
<% if( underlay){ %>
		return <%= target %><% member.name %>(<%= member.arguments.join(",") %>)
<% } -%>
	}
<% } -%>
<% } -%>
<% if( underlay) { -%>
<% for( name of events){ -%>
	_<%= name %>(evt){
		evt.overlaySource= this
		this.dispatchEvent("<%= name %>", evt)
	}
<% } -%>
<% } -%>

	static get observedAttributes(){ return <%- JSON.stringify( observedAttributes) %> }
	static get events(){ return <%- JSON.stringify( events) %> }
	constructor(){
<% if( underlay){ -%>
<% for( name of events){ -%>
		this._<%= name %>= this._<%= name %>.bind( this)
<% } -%>
<% } -%>
	}
	async connectedCallback(){
<% if( underlay){ -%>
		if( !this._underlay&& this._underlayFactory){
			this._underlay= this._underlayFactory()
		}
		if( this._underlay){
			// bind the value as soon as available
			this._underlay= await this._underlay

			// bind handlers
			var add= o.addEventListener|| o.on
			if( add){
				for( var name of <%= name %>.events){
					add.call( o, name, this[ "_"+ name])
				}
			}
		}
<% } -%>
	}
}
